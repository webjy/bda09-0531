{"version":3,"sources":["webpack:///./node_modules/protobufjs/src/rpc.js","webpack:///./node_modules/@protobufjs/pool/index.js","webpack:///./node_modules/protobufjs/src/converter.js","webpack:///./node_modules/protobufjs/src/roots.js","webpack:///./node_modules/protobufjs/src/index-light.js","webpack:///./node_modules/protobufjs/src/method.js","webpack:///./node_modules/protobufjs/src/writer.js","webpack:///./node_modules/core-js/library/modules/es6.array.is-array.js","webpack:///./node_modules/protobufjs/src/message.js","webpack:///./node_modules/core-js/library/modules/_create-property.js","webpack:///./node_modules/protobufjs/src/reader.js","webpack:///./node_modules/protobufjs/src/verifier.js","webpack:///./node_modules/@protobufjs/float/index.js","webpack:///./node_modules/@protobufjs/path/index.js","webpack:///./node_modules/@protobufjs/aspromise/index.js","webpack:///./node_modules/core-js/library/modules/es6.array.from.js","webpack:///./node_modules/core-js/library/fn/is-iterable.js","webpack:///./node_modules/@protobufjs/eventemitter/index.js","webpack:///./node_modules/protobufjs/src/index-minimal.js","webpack:///./node_modules/@protobufjs/base64/index.js","webpack:///./node_modules/protobufjs/src/type.js","webpack:///./node_modules/protobufjs/src/service.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js","webpack:///./node_modules/protobufjs/src/encoder.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/array/from.js","webpack:///./node_modules/protobufjs/src/oneof.js","webpack:///./node_modules/@protobufjs/fetch/index.js","webpack:///./node_modules/protobufjs/src/namespace.js","webpack:///./node_modules/protobufjs/src/rpc/service.js","webpack:///./node_modules/protobufjs/src/mapfield.js","webpack:///./node_modules/protobufjs/src/types.js","webpack:///./node_modules/protobufjs/src/object.js","webpack:///./node_modules/protobufjs/src/reader_buffer.js","webpack:///./node_modules/core-js/library/modules/core.is-iterable.js","webpack:///./node_modules/protobufjs/src/util/longbits.js","webpack:///./node_modules/protobufjs/src/field.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","webpack:///./src/api/realTimeMonitoring.js","webpack:///./node_modules/protobufjs/src/enum.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","webpack:///./node_modules/@protobufjs/utf8/index.js","webpack:///./node_modules/protobufjs/src/util.js","webpack:///./node_modules/core-js/library/fn/array/from.js","webpack:///./node_modules/@protobufjs/inquire/index.js","webpack:///./node_modules/protobufjs/src/writer_buffer.js","webpack:///./node_modules/protobufjs/src/decoder.js","webpack:///./node_modules/protobufjs/src/util/minimal.js","webpack:///./node_modules/@protobufjs/codegen/index.js","webpack:///./node_modules/protobufjs/src/root.js","webpack:///./node_modules/core-js/library/fn/array/is-array.js","webpack:///./node_modules/protobufjs/src/wrappers.js"],"names":["rpc","exports","Service","__webpack_require__","pool","alloc","slice","size","SIZE","MAX","slab","offset","buf","call","module","converter","Enum","util","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","values","keys","Object","i","length","repeated","typeDefault","fullName","isUnsigned","type","genValuePartial_toObject","fromObject","mtype","fields","fieldsArray","codegen","name","resolve","safeProp","map","toObject","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","push","valuesById","long","low","high","unsigned","toString","toNumber","bytes","arrayDefault","Array","prototype","join","String","fromCharCode","apply","hasKs2","index","_fieldsArray","indexOf","protobuf","load","filename","root","callback","Root","loadSync","build","encoder","decoder","verifier","ReflectionObject","Namespace","Type","Field","OneOf","MapField","Method","Message","wrappers","types","_configure","create","constructor","className","requestType","responseType","requestStream","responseStream","options","comment","isObject","undefined","isString","TypeError","this","resolvedRequestType","resolvedResponseType","fromJSON","json","toJSON","toJSONOptions","keepComments","Boolean","resolved","parent","lookupType","Writer","BufferWriter","LongBits","base64","utf8","Op","fn","len","val","next","noop","State","writer","head","tail","states","writeByte","pos","writeVarint32","VarintOp","writeVarint64","hi","lo","writeFixed32","Buffer","subarray","_push","uint32","value","int32","fromNumber","sint32","uint64","bits","from","int64","sint64","zzEncode","bool","fixed32","sfixed32","fixed64","sfixed64","float","writeFloatLE","double","writeDoubleLE","writeBytes","set","decode","string","write","fork","reset","ldelim","finish","BufferWriter_","$export","S","isArray","properties","$type","encode","message","encodeDelimited","reader","decodeDelimited","verify","object","$defineProperty","createDesc","f","Reader","BufferReader","indexOutOfRange","writeLength","RangeError","buffer","create_array","Uint8Array","Error","readLongVarint","readFixed32_end","end","readFixed64","isBuffer","_slice","readFloatLE","readDoubleLE","start","read","skip","skipType","wireType","BufferReader_","Long","merge","zzDecode","invalid","expected","keyType","genVerifyValue","ref","j","genVerifyKey","oneofs","oneofsArray","seenFirstField","optional","oneofProp","factory","Float32Array","f32","f8b","le","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatBE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","Math","round","exponent","floor","log","LN2","mantissa","pow","readFloat_ieee754","readUint","uint","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleBE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","path","isAbsolute","test","normalize","replace","parts","split","absolute","prefix","shift","splice","originPath","includePath","alreadyNormalized","asPromise","ctx","params","arguments","pending","Promise","reject","err","isArrayIter","toLength","createProperty","getIterFn","F","iter","arrayLike","result","step","iterator","O","C","aLen","mapfn","mapping","iterFn","done","EventEmitter","_listeners","on","evt","off","listeners","emit","args","configure","roots","p","n","charAt","ceil","b64","s64","t","chunk","b","invalidEncoding","c","charCodeAt","extensions","reserved","group","_fieldsById","_oneofsArray","_ctor","clearCache","defineProperties","fieldsById","get","names","id","toArray","ctor","generateConstructor","ctorProperties","oneOfGetter","oneof","oneOfSetter","add","nested","methods","inherited","arrayToJSON","filter","obj","declaringField","resolveAll","extend","isReservedId","isReservedName","remove","onAdd","onRemove","setup","wrapper","originalThis","d","typeName","target","decorateType","_methodsArray","service","addJSON","methodsArray","defineProperty","rpcImpl","requestDelimited","responseDelimited","method","rpcService","methodName","lcFirst","isReserved","m","q","s","_arrayWithoutHoles","arr","is_array_default","arr2","_iterableToArray","is_iterable_default","from_default","_nonIterableSpread","_toConsumableArray","__webpack_exports__","genTypePartial","basic","mapKey","packed","fieldNames","addFieldsToParent","self","oneofName","fetch","inquire","fs","xhr","readFile","contents","XMLHttpRequest","binary","onreadystatechange","readyState","status","response","responseText","overrideMimeType","open","send","array","_nestedArray","namespace","nestedArray","nestedJson","ns","getEnum","prev","setOptions","define","ptr","part","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupTypeOrEnum","lookupService","Type_","Service_","Enum_","rpcCall","requestCtor","responseCtor","request","setTimeout","endedByRPC","resolvedKeyType","fieldId","fieldKeyType","fieldValueType","decorateEnum","fieldName","bake","o","defaults","emptyArray","unshift","_handleAdd","_handleRemove","getOption","setOption","ifNotSet","Root_","utf8Slice","min","classof","ITERATOR","Iterators","isIterable","it","hasOwnProperty","zero","zeroHash","parseInt","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ruleRe","rule","isInteger","toLowerCase","required","defaultValue","extensionField","_packed","freeze","newBuffer","emptyObject","fieldType","fieldRule","default","teamAndCarList","teamAndCarAllBindList","teamAndGunList","logsDelay","lastgps","sendTerminal","vehicleControlOthers","bindQueryByCars","bindQueryByGuns","thirdpartyRegeo","_request__WEBPACK_IMPORTED_MODULE_0__","data","url","headers","content-type","comments","enm","allow_alias","c1","c2","key","safePropBackslashRe","safePropQuoteRe","ucFirst","str","toUpperCase","substring","camelCaseRe","camelCase","$0","$1","a","decorateRoot","enumerable","decorateEnumIndex","moduleName","mod","eval","e","_Buffer_allocUnsafe","writeBytesBuffer","copy","writeStringBuffer","utf8Write","_Buffer_from","byteLength","missing","rfield","global","dst","src","newError","CustomError","captureStackTrace","stack","window","isNode","process","versions","node","Number","isFinite","isset","isSet","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","longs","enums","encoding","allocUnsafe","functionParams","functionName","body","Codegen","formatStringOrScope","source","verbose","console","scopeKeys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","JSON","stringify","functionNameOverride","parse","common","deferred","files","SYNC","resolvePath","sync","cb","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","readFileSync","exposeRe","tryHandleExtension","extendedType","sisterField","parse_","common_","type_url","substr"],"mappings":"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","file":"js/commonProblem~demolitionAlarm~index.363dcc12.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(\"./enum\"),\r\n    util = require(\"./util\");\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %i:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        normalFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (!fields[i].partOf)\r\n            ( fields[i].resolve().repeated ? repeatedFields\r\n            : fields[i].map ? mapFields\r\n            : normalFields).push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (normalFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0; i < normalFields.length; ++i) {\r\n            var field = normalFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) {\r\n                var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\r\n                gen\r\n        (\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))\r\n        (\"else{\")\r\n            (\"d%s=%s\", prop, arrayDefault)\r\n            (\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)\r\n        (\"}\");\r\n            } else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    var hasKs2 = false;\r\n    for (i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            index = mtype._fieldsArray.indexOf(field),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.map) {\r\n            if (!hasKs2) { hasKs2 = true; gen\r\n    (\"var ks2\");\r\n            } gen\r\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\r\n        (\"d%s={}\", prop)\r\n        (\"for(var j=0;j<ks2.length;++j){\");\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\r\n        (\"}\");\r\n        } else { gen\r\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\r\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        }\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(\"./index-minimal\");\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Message          = require(\"./message\");\r\nprotobuf.wrappers         = require(\"./wrappers\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.util             = require(\"./util\");\r\n\r\n// Set up possibly cyclic reflection dependencies\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\r\nprotobuf.Root._configure(protobuf.Type);\r\nprotobuf.Field._configure(protobuf.Type);\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this method\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedResponseType = null;\r\n\r\n    /**\r\n     * Comment for this method\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {IMethod} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMethod} Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        \"requestType\"    , this.requestType,\r\n        \"requestStream\"  , this.requestStream,\r\n        \"responseType\"   , this.responseType,\r\n        \"responseStream\" , this.responseStream,\r\n        \"options\"        , this.options,\r\n        \"comment\"        , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = require('./_export');\n\n$export($export.S, 'Array', { isArray: require('./_is-array') });\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Properties<T>} [properties] Properties to set\r\n * @template T extends object = object\r\n */\r\nfunction Message(properties) {\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/*eslint-disable valid-jsdoc*/\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<T>} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.create = function create(properties) {\r\n    return this.$type.create(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {T} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {T} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n\r\n/*eslint-enable valid-jsdoc*/","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(\"./enum\"),\r\n    util      = require(\"./util\");\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else {\r\n            gen\r\n            (\"{\")\r\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\r\n                (\"if(e)\")\r\n                    (\"return%j+e\", field.name + \".\")\r\n            (\"}\");\r\n        }\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = {};\r\n    if (oneofs.length) gen\r\n    (\"var p={}\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        if (field.optional) gen\r\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(!util.isObject(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"object\"))\r\n            (\"var k=Object.keys(%s)\", ref)\r\n            (\"for(var i=0;i<k.length;++i){\");\r\n                genVerifyKey(gen, field, \"k[i]\");\r\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(!Array.isArray(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"array\"))\r\n            (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                genVerifyValue(gen, field, i, ref + \"[i]\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (field.partOf) {\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            }\r\n            genVerifyValue(gen, field, i, ref);\r\n        }\r\n        if (field.optional) gen\r\n        (\"}\");\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.is-iterable');\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.roots        = require(\"./roots\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(\"./enum\"),\r\n    OneOf     = require(\"./oneof\"),\r\n    Field     = require(\"./field\"),\r\n    MapField  = require(\"./mapfield\"),\r\n    Service   = require(\"./service\"),\r\n    Message   = require(\"./message\"),\r\n    Reader    = require(\"./reader\"),\r\n    Writer    = require(\"./writer\"),\r\n    util      = require(\"./util\"),\r\n    encoder   = require(\"./encoder\"),\r\n    decoder   = require(\"./decoder\"),\r\n    verifier  = require(\"./verifier\"),\r\n    converter = require(\"./converter\"),\r\n    wrappers  = require(\"./wrappers\");\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {Object.<number,Field>|null}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {Field[]|null}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {OneOf[]|null}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {Constructor<{}>}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type {Constructor<{}>}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\r\n        },\r\n        set: function(ctor) {\r\n\r\n            // Ensure proper prototype\r\n            var prototype = ctor.prototype;\r\n            if (!(prototype instanceof Message)) {\r\n                (ctor.prototype = new Message()).constructor = ctor;\r\n                util.merge(ctor.prototype, prototype);\r\n            }\r\n\r\n            // Classes and messages reference their reflected type\r\n            ctor.$type = ctor.prototype.$type = this;\r\n\r\n            // Mix in static methods\r\n            util.merge(ctor, Message, true);\r\n\r\n            this._ctor = ctor;\r\n\r\n            // Messages have non-enumerable default values on their prototype\r\n            var i = 0;\r\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\r\n                this._fieldsArray[i].resolve(); // ensures a proper value\r\n\r\n            // Messages have non-enumerable getters and setters for each virtual oneof field\r\n            var ctorProperties = {};\r\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\r\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\r\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\r\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\r\n                };\r\n            if (i)\r\n                Object.defineProperties(ctor.prototype, ctorProperties);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nType.generateConstructor = function generateConstructor(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"p\"], mtype.name);\r\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\r\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\r\n        if ((field = mtype._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    return gen\r\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\r\n        (\"this[ks[i]]=p[ks[i]]\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Message type descriptor.\r\n * @interface IType\r\n * @extends INamespace\r\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,IField>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {number[][]} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {IType} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    if (json.comment)\r\n        type.comment = json.comment;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IType} Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"    , inherited && inherited.options || undefined,\r\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\r\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\r\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"group\"      , this.group || undefined,\r\n        \"nested\"     , inherited && inherited.nested || undefined,\r\n        \"comment\"    , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n\r\n    // Replace setup methods with type-specific generated functions\r\n    this.encode = encoder(this)({\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this)({\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = converter.fromObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n\r\n    // Inject custom wrappers for common types\r\n    var wrapper = wrappers[fullName];\r\n    if (wrapper) {\r\n        var originalThis = Object.create(this);\r\n        // if (wrapper.fromObject) {\r\n            originalThis.fromObject = this.fromObject;\r\n            this.fromObject = wrapper.fromObject.bind(originalThis);\r\n        // }\r\n        // if (wrapper.toObject) {\r\n            originalThis.toObject = this.toObject;\r\n            this.toObject = wrapper.toObject.bind(originalThis);\r\n        // }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError<{}>} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @interface IConversionOptions\r\n * @property {Function} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {Function} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {Function} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Type.d} (TypeScript).\r\n * @typedef TypeDecorator\r\n * @type {function}\r\n * @param {Constructor<T>} target Target constructor\r\n * @returns {undefined}\r\n * @template T extends Message<T>\r\n */\r\n\r\n/**\r\n * Type decorator (TypeScript).\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {TypeDecorator<T>} Decorator function\r\n * @template T extends Message<T>\r\n */\r\nType.d = function decorateType(typeName) {\r\n    return function typeDecorator(target) {\r\n        util.decorateType(target, typeName);\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(\"./method\"),\r\n    util   = require(\"./util\"),\r\n    rpc    = require(\"./rpc\");\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {Method[]|null}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property {Object.<string,IMethod>} methods Method descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {IService} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    service.comment = json.comment;\r\n    return service;\r\n};\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IService} Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , inherited && inherited.options || undefined,\r\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\r\n        \"nested\"  , inherited && inherited.nested || undefined,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\r\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\r\n            m: method,\r\n            q: method.resolvedRequestType.ctor,\r\n            s: method.resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","import _Array$isArray from \"../../core-js/array/is-array\";\nexport default function _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","import _Array$from from \"../../core-js/array/from\";\nimport _isIterable from \"../../core-js/is-iterable\";\nexport default function _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(\"./enum\"),\r\n    types    = require(\"./types\"),\r\n    util     = require(\"./util\");\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = mtype._fieldsArray.indexOf(field),\r\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name) // !== undefined && !== null\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n            // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            } gen\r\n    (\"}\");\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (field.optional) gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","module.exports = require(\"core-js/library/fn/array/from\");","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(\"./field\"),\r\n    util  = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction OneOf(name, fieldNames, options, comment) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {IOneOf} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IOneOf} Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"oneof\"   , this.oneof,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} oneofName OneOf name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param {...string} fieldNames Field names\r\n * @returns {OneOfDecorator} Decorator function\r\n * @template T extends string\r\n */\r\nOneOf.d = function decorateOneOf() {\r\n    var fieldNames = new Array(arguments.length),\r\n        index = 0;\r\n    while (index < arguments.length)\r\n        fieldNames[index] = arguments[index++];\r\n    return function oneOfDecorator(prototype, oneofName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new OneOf(oneofName, fieldNames));\r\n        Object.defineProperty(prototype, oneofName, {\r\n            get: util.oneOfGetter(fieldNames),\r\n            set: util.oneOfSetter(fieldNames)\r\n        });\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(\"@protobufjs/aspromise\"),\r\n    inquire   = require(\"@protobufjs/inquire\");\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Field    = require(\"./field\"),\r\n    util     = require(\"./util\");\r\n\r\nvar Type,    // cyclic\r\n    Service,\r\n    Enum;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array, toJSONOptions) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedId = function isReservedId(reserved, id) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedName = function isReservedName(reserved, name) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {ReflectionObject[]|null}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @interface INamespace\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionField\r\n * @type {IExtensionField|IExtensionMapField}\r\n */\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedObject\r\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\r\n */\r\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {INamespace} Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum: \" + name);\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterTypes === \"boolean\") {\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    } else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n\r\n    // Otherwise try each nested namespace\r\n    } else\r\n        for (var i = 0; i < this.nestedArray.length; ++i)\r\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\r\n                return found;\r\n\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type: \" + path);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nNamespace._configure = function(Type_, Service_, Enum_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n    Enum    = Enum_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(\"./field\");\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction MapField(name, id, keyType, type, options, comment) {\r\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {ReflectionObject|null}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMapField} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"keyType\" , this.keyType,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\r\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\r\n\r\n    // submessage value: decorate the submessage and use its name as the type\r\n    if (typeof fieldValueType === \"function\")\r\n        fieldValueType = util.decorateType(fieldValueType).name;\r\n\r\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldValueType && typeof fieldValueType === \"object\")\r\n        fieldValueType = util.decorateEnum(fieldValueType).name;\r\n\r\n    return function mapFieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\r\n    };\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(\"./util\");\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {null} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(\"./util\");\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {Namespace|null}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {string|null}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').isIterable = function (it) {\n  var O = Object(it);\n  return O[ITERATOR] !== undefined\n    || '@@iterator' in O\n    // eslint-disable-next-line no-prototype-builtins\n    || Iterators.hasOwnProperty(classof(O));\n};\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(\"./enum\"),\r\n    types = require(\"./types\"),\r\n    util  = require(\"./util\");\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction Field(name, id, type, rule, extend, options, comment) {\r\n\r\n    if (util.isObject(rule)) {\r\n        comment = extend;\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        comment = options;\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {Type|null}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {OneOf|null}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {Type|Enum|null}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {Field|null}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {Field|null}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {boolean|null}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary options\r\n    if (this.options) {\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\r\n    };\r\n};\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nField._configure = function configure(Type_) {\r\n    Type = Type_;\r\n};\r\n","module.exports = require(\"core-js/library/fn/array/is-array\");","import request from '../request'\r\n\r\n//获取所有大队下的所有车辆(包括没绑定设备的车辆)\r\nexport function teamAndCarList(data) {\r\n    return request({\r\n        url: '/cars/allList',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\nexport function teamAndCarAllBindList(data) {\r\n    return request({\r\n        url: '/cars/allBindList',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n//获取所有大队下的所有枪支\r\nexport function teamAndGunList(data) {\r\n    return request({\r\n        url: '/guns/allList',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n//延迟一条异常报警\r\nexport function logsDelay(data) {   \r\n    return request({\r\n        url: '/logs/delays',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n//获取枪支设备最后点信息\r\nexport function lastgps(data) {\r\n    return request({\r\n        url: '/map/lastgps',\r\n        method: 'post',\r\n        // params:data,\r\n        data,\r\n        headers:{'content-type':'application/json'},\r\n    })\r\n}\r\n// 车辆最新位置信息\r\nexport function vehicleStatus(data) {\r\n    return request({\r\n        url: '/proxy/StandardApiAction_vehicleStatus',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// // 测试demo\r\n// export function demoData(data) {\r\n//     return request({\r\n//         url: '/demo/location',\r\n//         method: 'post',\r\n//         data\r\n//     })\r\n// }\r\n\r\n// 演示demo\r\nexport function demoData(data) {\r\n    return request({\r\n        url: '/demo/location',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 获取车辆行驶里程\r\nexport function runMileage(data) {\r\n    return request({\r\n        url: '/proxy/StandardApiAction_runMileage',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n\r\nexport function sendTerminal(data) {\r\n    return request({\r\n        url: '/terminal/send',\r\n        method: 'post',\r\n        data,\r\n        headers:{'content-type':'application/json'}\r\n    })\r\n}\r\n\r\n// 车辆控制\r\nexport function vehicleControlOthers(data) {\r\n    return request({\r\n        url: '/proxy/StandardApiAction_vehicleControlOthers',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n// 查询车辆绑定的枪支\r\nexport function bindQueryByCars(data) {\r\n    return request({\r\n        url: '/eoms/relations/queryByCars',\r\n        method: 'post',\r\n        data,\r\n\r\n    })\r\n}\r\n// 查询枪支绑定车辆\r\nexport function bindQueryByGuns(data) {\r\n    return request({\r\n        url: '/eoms/relations/queryByGuns',\r\n        method: 'post',\r\n        data,\r\n\r\n    })\r\n}\r\n\r\n// 查询地址\r\nexport function thirdpartyRegeo(data) {\r\n    return request({\r\n        url: '/noapp/thirdparty/gaode/regeo',\r\n        method: 'post',\r\n        data,\r\n\r\n    })\r\n}\r\n\r\n\r\n","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar Namespace = require(\"./namespace\"),\r\n    util = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this enum\r\n * @param {Object.<string,string>} [comments] The value comments for this enum\r\n */\r\nfunction Enum(name, values, options, comment, comments) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Enum comment text.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = comments || {};\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\r\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\r\n    enm.reserved = json.reserved;\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IEnum} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"  , this.options,\r\n        \"values\"   , this.values,\r\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"comment\"  , keepComments ? this.comment : undefined,\r\n        \"comments\" , keepComments ? this.comments : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {string} [comment] Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function add(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n\r\n    if (this.isReservedId(id))\r\n        throw Error(\"id \" + id + \" is reserved in \" + this);\r\n\r\n    if (this.isReservedName(name))\r\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id \" + id + \" in \" + this);\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function remove(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val == null)\r\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n","module.exports = require(\"core-js/library/fn/is-iterable\");","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(\"./util/minimal\");\r\n\r\nvar roots = require(\"./roots\");\r\n\r\nvar Type, // cyclic\r\n    Enum;\r\n\r\nutil.codegen = require(\"@protobufjs/codegen\");\r\nutil.fetch   = require(\"@protobufjs/fetch\");\r\nutil.path    = require(\"@protobufjs/path\");\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (object) {\r\n        var keys  = Object.keys(object),\r\n            array = new Array(keys.length),\r\n            index = 0;\r\n        while (index < keys.length)\r\n            array[index] = object[keys[index++]];\r\n        return array;\r\n    }\r\n    return [];\r\n};\r\n\r\n/**\r\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\r\n * @param {Array.<*>} array Array to convert\r\n * @returns {Object.<string,*>} Converted object\r\n */\r\nutil.toObject = function toObject(array) {\r\n    var object = {},\r\n        index  = 0;\r\n    while (index < array.length) {\r\n        var key = array[index++],\r\n            val = array[index++];\r\n        if (val !== undefined)\r\n            object[key] = val;\r\n    }\r\n    return object;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Tests whether the specified name is a reserved word in JS.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nutil.isReserved = function isReserved(name) {\r\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified property name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\r\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n    return \".\" + prop;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\nvar camelCaseRe = /_([a-z])/g;\r\n\r\n/**\r\n * Converts a string to camel case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0, 1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n\r\n/**\r\n * Decorator helper for types (TypeScript).\r\n * @param {Constructor<T>} ctor Constructor function\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {Type} Reflected type\r\n * @template T extends Message<T>\r\n * @property {Root} root Decorators root\r\n */\r\nutil.decorateType = function decorateType(ctor, typeName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (ctor.$type) {\r\n        if (typeName && ctor.$type.name !== typeName) {\r\n            util.decorateRoot.remove(ctor.$type);\r\n            ctor.$type.name = typeName;\r\n            util.decorateRoot.add(ctor.$type);\r\n        }\r\n        return ctor.$type;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(\"./type\");\r\n\r\n    var type = new Type(typeName || ctor.name);\r\n    util.decorateRoot.add(type);\r\n    type.ctor = ctor; // sets up .encode, .decode etc.\r\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\r\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\r\n    return type;\r\n};\r\n\r\nvar decorateEnumIndex = 0;\r\n\r\n/**\r\n * Decorator helper for enums (TypeScript).\r\n * @param {Object} object Enum object\r\n * @returns {Enum} Reflected enum\r\n */\r\nutil.decorateEnum = function decorateEnum(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (object.$type)\r\n        return object.$type;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Enum)\r\n        Enum = require(\"./enum\");\r\n\r\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\r\n    util.decorateRoot.add(enm);\r\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Decorator root (TypeScript).\r\n * @name util.decorateRoot\r\n * @type {Root}\r\n * @readonly\r\n */\r\nObject.defineProperty(util, \"decorateRoot\", {\r\n    get: function() {\r\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(\"./root\"))());\r\n    }\r\n});\r\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/es6.array.from');\nmodule.exports = require('../../modules/_core').Array.from;\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(\"./enum\"),\r\n    types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %i:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%i].decode(r))\"\r\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%i].decode(r)\"\r\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n// global object reference\r\nutil.global = typeof window !== \"undefined\" && window\r\n           || typeof global !== \"undefined\" && global\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(\"./field\"),\r\n    Enum    = require(\"./enum\"),\r\n    OneOf   = require(\"./oneof\"),\r\n    util    = require(\"./util\");\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type   = Type_;\r\n    parse  = parse_;\r\n    common = common_;\r\n};\r\n","require('../../modules/es6.array.is-array');\nmodule.exports = require('../../modules/_core').Array.isArray;\n","\"use strict\";\r\n\r\n/**\r\n * Wrappers for common types.\r\n * @type {Object.<string,IWrapper>}\r\n * @const\r\n */\r\nvar wrappers = exports;\r\n\r\nvar Message = require(\"./message\");\r\n\r\n/**\r\n * From object converter part of an {@link IWrapper}.\r\n * @typedef WrapperFromObjectConverter\r\n * @type {function}\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message<{}>} Message instance\r\n * @this Type\r\n */\r\n\r\n/**\r\n * To object converter part of an {@link IWrapper}.\r\n * @typedef WrapperToObjectConverter\r\n * @type {function}\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @this Type\r\n */\r\n\r\n/**\r\n * Common type wrapper part of {@link wrappers}.\r\n * @interface IWrapper\r\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\r\n * @property {WrapperToObjectConverter} [toObject] To object converter\r\n */\r\n\r\n// Custom wrapper for Any\r\nwrappers[\".google.protobuf.Any\"] = {\r\n\r\n    fromObject: function(object) {\r\n\r\n        // unwrap value type if mapped\r\n        if (object && object[\"@type\"]) {\r\n            var type = this.lookup(object[\"@type\"]);\r\n            /* istanbul ignore else */\r\n            if (type) {\r\n                // type_url does not accept leading \".\"\r\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\r\n                    object[\"@type\"].substr(1) : object[\"@type\"];\r\n                // type_url prefix is optional, but path seperator is required\r\n                return this.create({\r\n                    type_url: \"/\" + type_url,\r\n                    value: type.encode(type.fromObject(object)).finish()\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.fromObject(object);\r\n    },\r\n\r\n    toObject: function(message, options) {\r\n\r\n        // decode value if requested and unmapped\r\n        if (options && options.json && message.type_url && message.value) {\r\n            // Only use fully qualified type name after the last '/'\r\n            var name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\r\n            var type = this.lookup(name);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                message = type.decode(message.value);\r\n        }\r\n\r\n        // wrap value if unmapped\r\n        if (!(message instanceof this.ctor) && message instanceof Message) {\r\n            var object = message.$type.toObject(message, options);\r\n            object[\"@type\"] = message.$type.fullName;\r\n            return object;\r\n        }\r\n\r\n        return this.toObject(message, options);\r\n    }\r\n};\r\n"],"sourceRoot":""}